#!/bin/bash
# Installs Java.
set -e

if [ "$1" = "--debug" ]; then
  shift
  PRINT_DEBUG="1"
  set -x
fi

warn() { echo "$@" >&2; }
abort() { EXPECTED_EXIT="1"; warn "$@"; exit 1; }

abort_for_sh() {
  abort 'Error: add `eval "$(jenv init -)"` to the end of your .bash_profile!'
}

abort_for_zsh() {
  abort 'Error: add `eval "$(jenv init -)"` to the end of your .zshrc!'
}

abort_for_fish() {
  abort 'Error: check the installation instructions at https://github.com/gcuisinier/jenv#gettings-started!'
}

abort_with_shell_setup_message() {
  case $(basename ${SHELL:-bash}) in
  sh|bash)
    abort_for_sh
    ;;
  zsh)
    abort_for_zsh
    ;;
  fish)
    abort_for_fish
    ;;
  # tcsh users are on their own
  *)
    abort 'Error: you must finish setting up jenv in your shell; check `jenv init` for instructions!'
  esac
}

cleanup() {
  set +e
  if [ -n "$EXPECTED_EXIT" ]; then
    return
  fi
  warn "Error: $(basename $0) failed!"
  if [ -z "$PRINT_DEBUG" ]; then
    warn "For debugging output run:"
    warn "  $0 --debug"
    warn "If you're stuck: file an issue with debugging output at:"
    warn "  https://github.com/github/homebrew-bootstrap/issues/new"
  fi
}
trap "cleanup" EXIT

BASE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

if ! which rbenv &>/dev/null; then
  abort "Error: you need to 'brew install jenv'!"
fi

if ! jenv version-name &>/dev/null; then
  if ! [[ -z "$JENV_VERSION" ]]; then
    JAVA_REQUESTED="$JENV_VERSION"
  else
    JAVA_REQUESTED="$(jenv local)"
  fi

  cask_version="$(echo $JAVA_REQUESTED | awk -F. '{ print $2 }')"
  cask_name="github/bootstrap/zulu${cask_version}"
  brew bundle --file=- <<-EOS
tap "github/bootstrap"
cask "$cask_name"
EOS

  zulu_version_string="$(echo $JAVA_REQUESTED | sed 's,\(.*\)\.,\1_,')"
  yes | jenv add "/Library/Java/JavaVirtualMachines/zulu${zulu_version_string}.jdk/Contents/Home"
fi

if [ "$(jenv exec java -version 2>&1)" != "$(java -version 2>&1)" ]; then
  abort_with_shell_setup_message
fi

EXPECTED_EXIT="1"
exit 0
